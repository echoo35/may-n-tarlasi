// Oyun tahtasÄ±nÄ± temsil eden bir iki boyutlu dizi
let board = [];

// Oyun tahtasÄ±nÄ±n satÄ±r ve sÃ¼tun sayÄ±sÄ±
let rows = 8;
let columns = 8;

// Oyun alanÄ±ndaki mayÄ±n sayÄ±sÄ± ve konumlarÄ±
let minesCount = 10;
let minesLocation = [];

// KullanÄ±cÄ±nÄ±n tÄ±kladÄ±ÄŸÄ± karelerin sayÄ±sÄ±
let tilesClicked = 0;

// Bayrak modunun etkin olup olmadÄ±ÄŸÄ±nÄ± belirleyen bayrak
let flagEnabled = false;

// Oyunun bitip bitmediÄŸini kontrol eden bayrak
let gameOver = false;

// Sayfa yÃ¼klendiÄŸinde oyunu baÅŸlatan fonksiyon
window.onload = function() {
    startGame();
}

// MayÄ±nlarÄ±n konumunu belirleyen fonksiyon
function setMines() {
    let minesLeft = minesCount;
    while (minesLeft > 0) {
        let r = Math.floor(Math.random() * rows);
        let c = Math.floor(Math.random() * columns);
        let id = r.toString() + "-" + c.toString();

        if (!minesLocation.includes(id)) {
            minesLocation.push(id);
            minesLeft -= 1;
        }
    }
}

// Oyunu baÅŸlatan fonksiyon
function startGame() {
    // MayÄ±n sayÄ±sÄ±nÄ± gÃ¶steren alanÄ± gÃ¼nceller
    document.getElementById("mines-count").innerText = minesCount;
    // Bayrak modunu etkinleÅŸtiren dÃ¼ÄŸmeye tÄ±klama olayÄ±nÄ± dinler
    document.getElementById("flag-button").addEventListener("click", setFlag);
    // MayÄ±nlarÄ± yerleÅŸtirir
    setMines();

    // Oyun tahtasÄ±nÄ± oluÅŸturur
    for (let r = 0; r < rows; r++) {
        let row = [];
        for (let c = 0; c < columns; c++) {
            let tile = document.createElement("div");
            tile.id = r.toString() + "-" + c.toString();
            tile.addEventListener("click", clickTile);
            document.getElementById("board").append(tile);
            row.push(tile);
        }
        board.push(row);
    }

    console.log(board);
}

// Bayrak modunu etkinleÅŸtiren veya devre dÄ±ÅŸÄ± bÄ±rakan fonksiyon
function setFlag() {
    if (flagEnabled) {
        flagEnabled = false;
        document.getElementById("flag-button").style.backgroundColor = "lightgray";
    } else {
        flagEnabled = true;
        document.getElementById("flag-button").style.backgroundColor = "darkgray";
    }
}

// Kareye tÄ±klandÄ±ÄŸÄ±nda tetiklenen fonksiyon
function clickTile() {
    // Oyun bittiyse veya kare zaten tÄ±klanmÄ±ÅŸsa iÅŸlem yapma
    if (gameOver || this.classList.contains("tile-clicked")) {
        return;
    }

    let tile = this;
    // Bayrak modu etkinleÅŸtirilmiÅŸse iÅŸlemleri gerÃ§ekleÅŸtir
    if (flagEnabled) {
        if (tile.innerText == "") {
            tile.innerText = "ğŸš©";
        } else if (tile.innerText == "ğŸš©") {
            tile.innerText = "";
        }
        return;
    }

    // TÄ±klanan karenin mayÄ±n olup olmadÄ±ÄŸÄ±nÄ± kontrol et
    if (minesLocation.includes(tile.id)) {
        gameOver = true;
        revealMines();
        return;
    }

    // TÄ±klanan karenin konumunu al
    let coords = tile.id.split("-");
    let r = parseInt(coords[0]);
    let c = parseInt(coords[1]);
    // MayÄ±n kontrolÃ¼ yap
    checkMine(r, c);
}

// MayÄ±nlarÄ± gÃ¶steren fonksiyon
function revealMines() {
    for (let r = 0; r < rows; r++) {
        for (let c = 0; c < columns; c++) {
            let tile = board[r][c];
            if (minesLocation.includes(tile.id)) {
                tile.innerText = "ğŸ’£";
                tile.style.backgroundColor = "red";
            }
        }
    }
}

// Verilen konumda mayÄ±n olup olmadÄ±ÄŸÄ±nÄ± kontrol eden fonksiyon
function checkMine(r, c) {
    if (r < 0 || r >= rows || c < 0 || c >= columns) {
        return;
    }
    if (board[r][c].classList.contains("tile-clicked")) {
        return;
    }

    // Kareye tÄ±klandÄ±ÄŸÄ±nÄ± iÅŸaretle
    board[r][c].classList.add("tile-clicked");
    tilesClicked += 1;

    let minesFound = 0;

    // KomÅŸu karelerdeki mayÄ±nlarÄ± kontrol et
    minesFound += checkTile(r - 1, c - 1);
    minesFound += checkTile(r - 1, c);
    minesFound += checkTile(r - 1, c + 1);

    minesFound += checkTile(r, c - 1);
    minesFound += checkTile(r, c + 1);

    minesFound += checkTile(r + 1, c - 1);
    minesFound += checkTile(r + 1, c);
    minesFound += checkTile(r + 1, c + 1);

    // Etraftaki mayÄ±n sayÄ±sÄ±nÄ± kareye yaz
    if (minesFound > 0) {
        board[r][c].innerText = minesFound;
        board[r][c].classList.add("x" + minesFound.toString());
    } else {
        board[r][c].innerText = "";

        // Etraftaki boÅŸ kareleri kontrol et
        checkMine(r - 1, c - 1);
        checkMine(r - 1, c);
        checkMine(r - 1, c + 1);

        checkMine(r, c - 1);
        checkMine(r, c + 1);

        checkMine(r + 1, c - 1);
        checkMine(r + 1, c);
        checkMine(r + 1, c + 1);
    }

    // TÃ¼m kareler tÄ±klandÄ±ysa oyunu kazan
    if (tilesClicked == rows * columns - minesCount) {
        document.getElementById("mines-count").innerText = "Cleared";
        gameOver = true;
    }
}

// Verilen konumda mayÄ±n olup olmadÄ±ÄŸÄ±nÄ± kontrol eden fonksiyon
function checkTile(r, c) {
    if (r < 0 || r >= rows || c < 0 || c >= columns) {
        return 0;
    }
    if (minesLocation.includes(r.toString() + "-" + c.toString())) {
        return 1;
    }
    return 0;
}
